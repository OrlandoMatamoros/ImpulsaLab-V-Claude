'use client';

import { useState, useEffect } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import Link from 'next/link';
import { auth } from '@/lib/firebase';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import {
  LayoutDashboard,
  Users,
  Menu,
  X,
  LogOut,
  Shield,
  MessageSquare,
  UserCog
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Toaster } from 'react-hot-toast';
import toast from 'react-hot-toast';

const menuItems = [
  {
    title: 'Dashboard Chatbot',
    href: '/admin',
    icon: MessageSquare,
  },
  {
    title: 'Gestión de Usuarios',
    href: '/admin/users',
    icon: UserCog,
  },
  {
    title: 'Lista Simple',
    href: '/admin/usuarios',
    icon: Users,
  }
];

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      if (!firebaseUser) {
        router.push('/login');
        return;
      }

      // CAMBIO CRÍTICO: Permitir admin Y consultant
      const token = await firebaseUser.getIdTokenResult();
      if (token.claims.role !== 'admin' && token.claims.role !== 'consultant') {
        toast.error('No tienes permisos para acceder a esta sección');
        router.push('/dashboard');
        return;
      }

      setUser({
        uid: firebaseUser.uid,
        email: firebaseUser.email,
        displayName: firebaseUser.displayName,
        role: token.claims.role
      });
      setLoading(false);
    });

    return () => unsubscribe();
  }, [router]);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      router.push('/login');
      toast.success('Sesión cerrada');
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
      toast.error('Error al cerrar sesión');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  // Determinar título según el rol
  const getRoleTitle = () => {
    if (user?.role === 'admin') return 'Panel Admin';
    if (user?.role === 'consultant') return 'Panel Consultor';
    return 'Panel';
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <aside className={`${
        sidebarOpen ? 'w-64' : 'w-16'
      } transition-all duration-300 bg-white border-r border-gray-200`}>
        <div className="flex flex-col h-full">
          {/* Logo */}
          <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
            {sidebarOpen && (
              <Link href="/admin" className="flex items-center space-x-2">
                <Shield className="h-8 w-8 text-blue-600" />
                <span className="text-xl font-bold text-gray-900">
                  {getRoleTitle()}
                </span>
              </Link>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="ml-auto"
            >
              {sidebarOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            </Button>
          </div>

          {/* Navigation - Filtrar items según el rol */}
          <nav className="flex-1 px-2 py-4 space-y-1">
            {menuItems.map((item) => {
              // Si es consultor, no mostrar Gestión de Usuarios ni Lista Simple
              if (user?.role === 'consultant' && 
                  (item.href === '/admin/users' || item.href === '/admin/usuarios')) {
                return null;
              }
              
              const isActive = pathname === item.href;
              
              return (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`flex items-center px-3 py-2 rounded-lg transition-colors ${
                    isActive
                      ? 'bg-blue-50 text-blue-600'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <item.icon className={`${sidebarOpen ? 'mr-3' : 'mx-auto'} h-5 w-5`} />
                  {sidebarOpen && (
                    <span className="font-medium">{item.title}</span>
                  )}
                </Link>
              );
            })}
          </nav>

          {/* User section */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="flex-1 min-w-0">
                {sidebarOpen && (
                  <>
                    <p className="text-sm font-medium text-gray-900 truncate">
                      {user?.email}
                    </p>
                    <p className="text-xs text-gray-500">
                      {user?.role === 'admin' ? 'Administrador' : 'Consultor'}
                    </p>
                  </>
                )}
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleLogout}
                title="Cerrar sesión"
              >
                <LogOut className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </div>
      </aside>

      {/* Main content */}
      <div className="flex-1 overflow-y-auto">
        {children}
      </div>

      <Toaster position="top-right" />
    </div>
  );
}